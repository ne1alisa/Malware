#!/usr/bin/python3
import random 
import json
import string
from sys import argv


item_size = 20

 
#def unique_strings(k: int, ntokens: int,
#               pool: str=string.ascii_letters) -> set:
  
#    seen = set()
#    while len(seen) < ntokens:
#        token = ''.join(random.choices(pool, k=k))
#        seen.add(token)
#    return seen


def build_state():
	matrix = []
	for i in range(item_size): 
		matrix.append([random.randint ( 0, 1 ) for j in range(item_size)])

	matrix[0][1] = 0
	matrix[1][0] = 0

	
	
	name = ["s","t"] + ["u%d"%val for val in range(item_size-2)]
	
	intr = [1,0] + [random.randint (  0, 1 ) for val in range(item_size-2)]
	
	medic = [0,0] + [random.randint (0,1 ) for val in range(item_size-2)]

	share = [random.randint ( 0, 1 ) for j in range(item_size)]
	

	return {'matrix':matrix, 'names':name, 'intr':intr, 'medic':medic, 'share':share}


def load_state():
	try:
		return json.load(open('state.json','r')) 
	except: 
		return None

def mul(vector, matrix):
	result = []
	
	for j in range(len(vector)):
		val = 0
		for i in range(len(vector)):
			val |= matrix[i][j]&vector[i]
		result.append(val)
	return result


if len(argv) != 3 :
	print("Usage: "+argv[0]+ " <name> <virus>")
	exit(-1)

node = argv[1]
virus = argv[2]

state = load_state()
if state is None:
	state = build_state()
	json.dump(state,open('state.json','w'))

if node not in state['names']:
	print("Incorrect name")
	exit(-1)
idx = 0
for i in range(item_size):
	if state['names'][i] == node: 
		idx = i
		break		

if state['intr'][idx] == 0:
	print("Нельзя обратиться")
	exit(-1)

if 'virus' not in state: state['virus'] = dict()

medicine = state['virus'][virus] if virus in state['virus'] else [0 for val in range(item_size)]
#print ("Medicine:\n")
#print(medicine)

inf =  [0 for val in range(item_size)]
inf[idx] = 1
#print('Infective vector:\n')
#print (inf)

MedMatrix = []
for i in range (item_size):
	MedMatrix.append([state['matrix'][i][j]& state['share'][i] for j in range (item_size)])		
	


new_inf = []
was_ill = []
while True:
	new_inf = mul(inf, state['matrix'])
	#print ('NewInf:   ', new_inf)

	old_medicine = medicine
	medicine = mul(medicine, MedMatrix)
	
	medicine = [medicine[j]|(new_inf[j] & state['medic'][j]) for j in range(item_size)]
	#print("Medic:    ", state['medic'])	
	#print("Medicine: ", medicine)	
	
	new_inf = [new_inf[j] & (not medicine[j]) for j in range(item_size)]
	
	#print('\nNew infective vector:\n')
	#print(new_inf)

	if new_inf == inf and old_medicine == medicine: break
	inf = new_inf

	for i in range (item_size):
		if inf[i] == 1: 	
			was_ill.append(state['names'][i])
			
was_ill=sorted(list(set(was_ill)))

state['virus'][virus] = medicine

if 't' in was_ill: 
	print ("WIN")
	print ("Bad guy use: ", ','.join(state['virus'].keys()))
else: print(was_ill)

#json.dump(state,open('state.json','w'))
